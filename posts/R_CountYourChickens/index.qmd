---
title: "Count Your Chickens!"
author: "Milt"
date: "2022-10-12"
categories: ["Data Science/Programming"]
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(collapse = TRUE)

library(dplyr)
library(ggplot2)
library(stringr)
library(doParallel)
```

### Introduction

We finally opened up the board game [Count your Chickens](https://www.mindware.orientaltrading.com/count-your-chickens-a2-GM108.fltr?keyword=count+your+chickens), which my daughter received for Christmas. We played a game that we won fairly easily, which got me to thinking how easy is this game? From just our one game it seemed like it was pretty hard to lose so I decided to try to write a program that would simulate the game play and thus allow me to estimate the probability of winning.

### The game rules

**Objective**: Get to the end of the path with \>= 40 chicks in the coop.

**Game play:**

1.  Spin the spinner
    1.  If spin == fox
        1.  remove 1 chick from the coop, next player goes.
    2.  If spin != fox
        1.  move your game piece to the next space on the board that contains the item you spun. If there is no matching item, move to the end of the path.
        2.  The number number of spaces you moved along the board is the number of chicks you pick up along the way.
        3.  If you land on a bonus square, you get an bonus chick.
        4.  Next player goes.

**Writing R function to play a round of the game and record the results**

```{r}
playGame <-
function(){
 
  #Create the spinner, game board, and bonus vectors to reference
  spinner <- c("sheep","cow","dog","pig","tractor","fox")
  board <- c("empty", "sheep", "pig", "tractor", "cow", "dog", "pig", "cow", "dog", "sheep", "tractor","empty", "cow", "pig","empty","empty","empty","tractor", "empty", "tractor", "dog", "sheep","cow", "dog", "pig", "tractor", "empty", "sheep", "cow", "empty","empty", "tractor", "pig","sheep", "dog", "empty", "sheep", "cow", "pig", "end")

  bonus <- rep(0,40)
  bonus[c(4,8,22,35,39)] <- 1

  #Initialize some iteration variables to store counts to output
  totalSpaces <- 0;
  numChicks <- 0
  totalSpins <- 0
  numFox <- 0
  stolenChicks <- 0
  numBonus <- 0


  while(TRUE){
    #spin the spinner
    c_spin <- sample(spinner,1)
    totalSpins <- totalSpins + 1
 
    #Check if the player spun fox, if so steal a chick if there is one to steal and spin again.
    if(c_spin == "fox"){
      numChicks <- max(0,numChicks-1)
      numFox <- numFox + 1
      next
    }
   
    #find how many spaces it is till the next item spun on the gameboard.
    cut <- min(which(board==c_spin))
 
    #If the board ends before the next item spun shows up, it will retun 'Inf' so we'll
    #just set it to be the remaining number of spaces left on the board.
    if(cut == "Inf") cut <- length(board)
    totalSpaces <- totalSpaces + cut
 
    if(bonus[totalSpaces]==1) numBonus <- numBonus + 1
    numChicks <- numChicks + cut + bonus[totalSpaces]
    board <- board[-c(1:cut)]
    if(length(board) == 0){ break}
  }
  data.frame(chicks = numChicks, foxes = numFox, bonus = numBonus, spins = totalSpins)
}

```

**Play 10,000 games and record the results**

```{r}
registerDoParallel(cores=7)
stacked <- foreach(i=1:10000, .combine = rbind) %dopar% playGame()

```

**Plot the results**

```{r}
win_prop <- round(mean(stacked$chicks >= 40),2)*100

stacked |>
  mutate(cc = if_else(chicks >= 40,str_glue("Won ({win_prop}%)"),str_glue("Lost ({100-win_prop}%)"))) |>
  #count(chicks) |>
  ggplot(aes(x = chicks, fill = cc)) +
  geom_histogram(binwidth = 1, color = "black") +
  scale_fill_manual(values = c("#8795E8", "#FF7FD9")) +
  labs(x = "Total Number of Chicks at end of game",
       y = "Number of Games",
       title = str_glue("Results of 10,000 games played."),
       title2 = "sdf",
       fill = "Results")
```
